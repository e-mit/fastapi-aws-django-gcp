AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Create an API Gateway and a Lambda to call a FastAPI app
Parameters:
  functionName:
    Description: The name of the lambda function
    Type: String
    MinLength: 1
    MaxLength: 100
  VPCsecurityGroupID:
    Description: The ID of the security group in the VPC
    Type: String
    MinLength: 1
    MaxLength: 300
  VPCsubnetIDlist:
    Description: A comma-separated list (in one string) of subnet IDs in the VPC
    Type: String
    MinLength: 1
    MaxLength: 300
  timeout:
    Description: Timeout in seconds for the lambda
    Type: Number
    MinValue: 1
    Default: 10

Resources:

  logGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupClass: STANDARD
      RetentionInDays: 3
      LogGroupName:
        !Join
        - '/'
        - - 'lambda-log'
          - !Ref functionName

  accessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Give lambda CRUD access to dynamoDB
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:DeleteItem"
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:UpdateItem"
            Resource: !Ref dynamoDB

  function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Ref: functionName
      Architectures:
        - x86_64
      MemorySize: 128
      PackageType: Zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.10
      CodeUri: function
      Description: A Lambda to call a FastAPI app
      Timeout: !Ref timeout
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSLambdaVPCAccessExecutionRole
        - !Ref accessPolicy
      Layers:
        - Ref: libs
      Events:
        APIevent:
          Type: HttpApi
          Properties:
            ApiId: !Ref apiGateway
      VpcConfig:
        SecurityGroupIds:
          - !Ref VPCsecurityGroupID
        SubnetIds: !Split [",", !Ref VPCsubnetIDlist]
      LoggingConfig:
        LogFormat: Text
        LogGroup: !Ref logGroup

  libs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName:
        !Join
        - '-'
        - - !Ref functionName
          - 'layer'
      Description: Python packages used by the lambda.
      ContentUri: package
      CompatibleArchitectures:
        - x86_64
      CompatibleRuntimes:
        - python3.10

  apiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: API Gateway for the app
      FailOnWarnings: true
      Name:
        !Join
        - '-'
        - - !Ref functionName
          - 'apigateway'

  dynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
        -
          AttributeName: "pk"
          AttributeType: "N"
        -
          AttributeName: "timestamp"
          AttributeType: "N"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "3"
        WriteCapacityUnits: "3"
      TableName:
        !Join
        - '-'
        - - !Ref functionName
          - 'dynamodb'
      GlobalSecondaryIndexes:
        -
          IndexName: "gsi"
          KeySchema:
            -
              AttributeName: "pk"
              KeyType: "HASH"
            -
              AttributeName: "timestamp"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: "3"
            WriteCapacityUnits: "3"

Outputs:
  ApiUrl:
    Description: URL of the API endpoint
    Value:
      Fn::Sub: 'https://${apiGateway}.execute-api.${AWS::Region}.${AWS::URLSuffix}/'
  ApiId:
    Description: API ID
    Value:
      Ref: apiGateway
